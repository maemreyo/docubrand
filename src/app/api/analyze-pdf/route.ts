// CREATED: 2025-07-03 - PDF analysis API endpoint using Gemini

import { NextRequest, NextResponse } from 'next/server';
import { GeminiConfigManager } from '@/lib/gemini-config';
import { GeminiService } from '@/lib/gemini-service';
import { GeminiPDFAnalysisRequest, GeminiAnalysisResponse } from '@/types/gemini';
import fs from 'fs';
import path from 'path';

export const runtime = 'nodejs';
export const maxDuration = 60; // 60 seconds timeout for PDF processing

// Check if we're in development mode
const isDevelopmentMode = process.env.NEXT_PUBLIC_APP_ENV === 'development';

/**
 * Load sample response for development mode
 */
function loadSampleResponse(): GeminiAnalysisResponse {
  try {
    const samplePath = path.join(process.cwd(), 'sampleResponse.json');
    const sampleData = fs.readFileSync(samplePath, 'utf8');
    const parsedData = JSON.parse(sampleData);
    return parsedData.data;
  } catch (error) {
    console.error('Failed to load sample response:', error);
    throw new Error('Failed to load sample response for development mode');
  }
}

interface APIRequest {
  pdfBase64: string;
  documentType?: 'quiz' | 'worksheet' | 'general';
  language?: 'en' | 'vi';
  fileName?: string;
}

interface APIResponse {
  success: boolean;
  data?: GeminiAnalysisResponse;
  error?: string;
  processingTime?: number;
}

/**
 * POST /api/analyze-pdf
 * Analyze PDF document using Gemini AI
 */
export async function POST(request: NextRequest): Promise<NextResponse<APIResponse>> {
  const startTime = Date.now();
  
  try {
    console.log('üìÑ PDF Analysis API called');

    // Validate environment configuration
    const envValidation = GeminiConfigManager.validateEnvironment();
    if (!envValidation.valid) {
      console.error('‚ùå Environment validation failed:', envValidation.errors);
      return NextResponse.json(
        {
          success: false,
          error: `Configuration error: ${envValidation.errors.join(', ')}`
        },
        { status: 500 }
      );
    }

    // Parse request body
    const body: APIRequest = await request.json();
    
    // Validate required fields
    if (!body.pdfBase64) {
      return NextResponse.json(
        {
          success: false,
          error: 'Missing required field: pdfBase64'
        },
        { status: 400 }
      );
    }

    // Validate base64 format
    if (!isValidBase64(body.pdfBase64)) {
      return NextResponse.json(
        {
          success: false,
          error: 'Invalid base64 format for PDF data'
        },
        { status: 400 }
      );
    }

    // Check PDF size (estimate from base64)
    const estimatedSize = (body.pdfBase64.length * 3) / 4; // Base64 to bytes conversion
    const maxSize = 20 * 1024 * 1024; // 20MB
    if (estimatedSize > maxSize) {
      return NextResponse.json(
        {
          success: false,
          error: 'PDF file too large. Maximum size is 20MB.'
        },
        { status: 413 }
      );
    }

    console.log('üìã Analysis request details:', {
      documentType: body.documentType || 'general',
      language: body.language || 'en',
      fileName: body.fileName || 'unknown',
      estimatedSizeMB: Math.round(estimatedSize / 1024 / 1024)
    });

    // Use sample response in development mode or call Gemini API in production
    let analysisResult: GeminiAnalysisResponse;
    
    if (isDevelopmentMode) {
      console.log('üß™ Development mode: Using sample response instead of calling Gemini API');
      analysisResult = loadSampleResponse();
    } else {
      // Create Gemini service
      const geminiService = await GeminiConfigManager.getService();

      // Prepare analysis request
      const analysisRequest: GeminiPDFAnalysisRequest = {
        pdfBase64: body.pdfBase64,
        documentType: body.documentType || 'general',
        language: body.language || 'en',
        extractionPrompt: '' // Will be generated by PromptTemplates
      };

      // Perform analysis
      analysisResult = await geminiService.analyzePDF(analysisRequest);
    }
    
    const processingTime = Date.now() - startTime;
    
    console.log('‚úÖ PDF analysis completed successfully:', {
      questionsFound: analysisResult.extractedQuestions.length,
      sectionsFound: analysisResult.documentStructure.sections.length,
      confidence: analysisResult.processingInfo.confidence,
      processingTimeMs: processingTime
    });

    // Return successful response
    return NextResponse.json({
      success: true,
      data: analysisResult,
      processingTime
    });

  } catch (error) {
    const processingTime = Date.now() - startTime;
    
    console.error('‚ùå PDF analysis failed:', error);

    // Handle specific error types
    let statusCode = 500;
    let errorMessage = 'Internal server error during PDF analysis';

    if (error instanceof Error) {
      errorMessage = error.message;
      
      // Map specific errors to appropriate status codes
      if (errorMessage.includes('API key')) statusCode = 401;
      else if (errorMessage.includes('rate limit')) statusCode = 429;
      else if (errorMessage.includes('too large')) statusCode = 413;
      else if (errorMessage.includes('Invalid request')) statusCode = 400;
    }

    return NextResponse.json(
      {
        success: false,
        error: errorMessage,
        processingTime
      },
      { status: statusCode }
    );
  }
}

/**
 * GET /api/analyze-pdf
 * Get API information and status
 */
export async function GET(): Promise<NextResponse> {
  try {
    const envValidation = GeminiConfigManager.validateEnvironment();
    
    return NextResponse.json({
      service: 'DocuBrand PDF Analysis API',
      version: '1.0.0',
      status: isDevelopmentMode ? 'development_mode' : (envValidation.valid ? 'ready' : 'configuration_error'),
      capabilities: [
        'PDF document analysis',
        'Educational content extraction', 
        'Question and answer detection',
        'Structured JSON output',
        'Bilingual support (EN/VI)'
      ],
      limits: {
        maxFileSize: '20MB',
        supportedFormats: ['PDF'],
        timeout: '60 seconds',
        models: ['gemini-2.0-flash', 'gemini-1.5-flash', 'gemini-1.5-pro']
      },
      environment: isDevelopmentMode ? 'development_with_sample_data' : (envValidation.valid ? 'configured' : envValidation.errors),
      devMode: isDevelopmentMode ? 'Using sample response from sampleResponse.json' : undefined
    });

  } catch (error) {
    return NextResponse.json(
      {
        service: 'DocuBrand PDF Analysis API',
        status: 'error',
        error: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

/**
 * Validate base64 string format
 */
function isValidBase64(str: string): boolean {
  try {
    // Basic base64 validation
    if (!str || str.length === 0) return false;
    
    // Check if string contains only valid base64 characters
    const base64Regex = /^[A-Za-z0-9+/]*={0,2}$/;
    if (!base64Regex.test(str)) return false;
    
    // Check if length is multiple of 4 (base64 requirement)
    if (str.length % 4 !== 0) return false;
    
    return true;
  } catch {
    return false;
  }
}

/**
 * Handle CORS preflight requests
 */
export async function OPTIONS(): Promise<NextResponse> {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
      'Access-Control-Max-Age': '86400'
    }
  });
}